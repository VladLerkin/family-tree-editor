name: Build and Release (JavaFX)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-matrix:
    name: Build on ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.runner }}
    env:
      MAC_SIGNING_IDENTITY: ${{ secrets.MAC_SIGNING_IDENTITY }}
      MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
      MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
      NOTARY_API_KEY_ID: ${{ secrets.NOTARY_API_KEY_ID }}
      NOTARY_API_KEY_ISSUER: ${{ secrets.NOTARY_API_KEY_ISSUER }}
      NOTARY_API_KEY_P8: ${{ secrets.NOTARY_API_KEY_P8 }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - { runner: 'macos-14',   name: 'macOS (arm64)', profile: 'mac-aarch64', artifact_suffix: 'macos-arm64' }
          - { runner: 'macos-13',   name: 'macOS (x64)',   profile: 'mac-x64',     artifact_suffix: 'macos-x64' }
          - { runner: 'ubuntu-latest', name: 'Linux',      profile: 'linux',       artifact_suffix: 'linux' }
          - { runner: 'windows-latest', name: 'Windows',   profile: 'windows',     artifact_suffix: 'windows' }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 25
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'

      - name: Install Linux packaging prerequisites
        if: matrix.os.runner == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot binutils desktop-file-utils

      - name: Show Java and OS info
        run: |
          java -version
          mvn -v
        shell: bash

      - name: Configure Apple codesigning (if secrets provided)
        if: startsWith(matrix.os.runner, 'macos') && env.MAC_SIGNING_IDENTITY != '' && env.MAC_CERT_BASE64 != '' && env.MAC_CERT_PASSWORD != ''
        shell: bash
        run: |
          KEYCHAIN=build.keychain
          security create-keychain -p "$KEYCHAIN" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN" "$KEYCHAIN"
          echo "${{ env.MAC_CERT_BASE64 }}" | base64 --decode > developer_id.p12
          security import developer_id.p12 -k "$KEYCHAIN" -P "${{ env.MAC_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN" "$KEYCHAIN"
          echo "SIGNING_IDENTITY=${{ env.MAC_SIGNING_IDENTITY }}" >> $GITHUB_ENV
      
      - name: Build with Maven (profile ${{ matrix.os.profile }})
        shell: bash
        run: |
          if [[ "${{ matrix.os.runner }}" == macos-* && -n "${{ env.MAC_SIGNING_IDENTITY }}" ]]; then
            mvn -B -DskipTests -P${{ matrix.os.profile }} -Dmac.sign=true -Dmac.signing.user="${{ env.MAC_SIGNING_IDENTITY }}" clean package
          else
            mvn -B -DskipTests -P${{ matrix.os.profile }} clean package
          fi
      
      - name: Notarize and staple DMG (if on macOS and secrets provided)
        if: startsWith(matrix.os.runner, 'macos') && env.NOTARY_API_KEY_ID != '' && env.NOTARY_API_KEY_ISSUER != '' && env.NOTARY_API_KEY_P8 != ''
        shell: bash
        run: |
          DMG=$(ls target/dist/*.dmg | head -n1)
          echo "Submitting $DMG for notarization..."
          # Write API key to file
          echo "${{ env.NOTARY_API_KEY_P8 }}" > notary_api_key.p8
          xcrun notarytool submit "$DMG" \
            --key-id "${{ env.NOTARY_API_KEY_ID }}" \
            --issuer "${{ env.NOTARY_API_KEY_ISSUER }}" \
            --key notary_api_key.p8 \
            --wait
          echo "Stapling notarization ticket..."
          xcrun stapler staple "$DMG"
          xcrun stapler validate "$DMG"

      - name: Upload native package artifact
        uses: actions/upload-artifact@v4
        with:
          name: family-tree-editor-${{ matrix.os.artifact_suffix }}
          path: |
            target/dist/*
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: [build-matrix]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS arm64 package
        uses: actions/download-artifact@v4
        with:
          name: family-tree-editor-macos-arm64
          path: artifacts/macos-arm64
      - name: Download macOS x64 package
        uses: actions/download-artifact@v4
        with:
          name: family-tree-editor-macos-x64
          path: artifacts/macos-x64
      - name: Download Linux package
        uses: actions/download-artifact@v4
        with:
          name: family-tree-editor-linux
          path: artifacts/linux
      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: family-tree-editor-windows
          path: artifacts/windows
      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**
          draft: false
          prerelease: false
          generate_release_notes: true
